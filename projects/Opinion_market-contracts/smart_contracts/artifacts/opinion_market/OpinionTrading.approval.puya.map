{
  "version": 3,
  "sources": [
    "../../opinion_market/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAqJK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAZA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAnDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA7DL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA6DK;;;AAAA;;AAfA;;AAAA;AAAA;AAAA;;AAAA;AA9CL;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA8CK;;;AAAA;;AA9BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAgBK;;;AAAA;;AAAL;;;AAQe;;AAAA;;AAAA;AAA4C;;AAA5C;AAAP;AACA;;AAAe;;AAAf;AACA;;;;;;;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;AAAA;;AAAA;AACA;;;;;;;;;;;AAAA;;AAAA;AACA;AAAe;AAAf;AACA;AAAgB;AAAhB;AACA;AAAgB;AAAhB;AACuB;;AAAA;;AAAA;AAAvB;;AAAA;AAAA;;AAcR;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;;AAA0B;AAAA;;AAAA;AAAA;AAA1B;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AAZO;AAAA;AAAA;AAAA;;AAAA;AAcA;;AAAA;;AAAkB;AAAlB;AAAP;AACkC;;AAAtB;AAAA;AAAA;AAAA;;AACL;AAAP;AACgB;;AAAhB;AAA8B;AAA9B;AAGA;AAAA;AAAA;AAAA;AAAiB;AAAjB;AAAA;AAAA;AAAA;;AAGR;;;AAEe;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;;AAA0B;AAAA;;AAAA;AAAA;AAA1B;AAAP;AACO;;AAAA;;AAAoB;;AAApB;AAAP;AACO;;AAAA;;AAAkB;AAAlB;AAAP;AACkC;;AAAtB;AAAA;AAAA;AAAA;;AACL;AAAP;AACgB;;AAAhB;AAA8B;AAA9B;AAEA;AAAA;AAAA;AAAA;AAAiB;AAAjB;AAAA;AAAA;AAAA;;AAGR;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAA;AAAP;AACO;;AAA2B;AAAA;;AAAA;AAAA;AAA3B;AAAP;AAEG;AAAA;AAAA;AAAA;AAAgB;AAAA;AAAA;AAAA;AAAhB;AAAX;;;AACY;AAAe;AAAf;;AAEA;AAAe;AAAf;;AAGZ;;;;;AAEe;AAAA;AAAA;AAAA;AAAP;AAG2C;;AAAtB;AAAA;AAAA;AACrB;AAGe;AAAA;AAAA;AAAA;;AAAA;AAAgB;AAAA;AAAA;AAAA;;AAAA;AAG5B;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAX;;;AAC2B;AAAA;AAAA;AAAA;AAKmB;;AAAf;AAAvB;;AAGG;AAAA;AAAA;AAAA;AAAgB;AAAhB;AAAX;;;AACe;;AAAe;AAAf;AAAf;;;AAE6E;AAAA;AAAA;AAAA;AAAxB;;AAAA;AAAA;AAArB;AAAA;AAcc;;AAAhB;AAGtB;AACa;;;;;;AADb;;;AAGQ;;;;AAHR;AAOoB;;AAAhB;AAAJ;;AArBwB;;;;;AAEjB;;AAAe;AAAf;AAAf;;;AAE6E;AAAA;AAAA;AAAA;AAAxB;;AAAA;AAAA;AAArB;AAAA;;;;AAGA;;;;;AAnBL;AAAA;AAAA;AAAA;;;;AAoC3B;;;AAEe;;AAAc;AAAA;;AAAA;AAAA;AAAd;AAAP;AAGA;AACa;AAAA;;AAAA;AAAA;AAEU;AAAA;;AAAA;AAAA;;;AADZ;;;;;AAFX;;;AAIQ;;;;AAJR;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000000 2 500000 1000"
    },
    "14": {
      "op": "bytecblock \"outcome\" \"shares_b\" \"shares_a\" \"localState\" \"creator\" \"expiration_time\""
    },
    "77": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "79": {
      "op": "bz main_after_if_else@12",
      "stack_out": []
    },
    "82": {
      "op": "pushbytess 0xcc6ddfbf 0x9bef0340 0x4c0f99f0 0xdf4973e5 0x1d53b496 0x33b3499e 0x30c6d58a // method \"create_market(string,string,string,uint64)void\", method \"buy_shares_a(pay)void\", method \"buy_shares_b(pay)void\", method \"settle_market()void\", method \"redeem_shares()void\", method \"delete_application()void\", method \"opt_in()void\""
    },
    "119": {
      "op": "txna ApplicationArgs 0"
    },
    "122": {
      "op": "match main_create_market_route@5 main_buy_shares_a_route@6 main_buy_shares_b_route@7 main_settle_market_route@8 main_redeem_shares_route@9 main_delete_application_route@10 main_opt_in_route@11"
    },
    "138": {
      "block": "main_after_if_else@12",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "139": {
      "op": "return"
    },
    "140": {
      "block": "main_opt_in_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "142": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0",
        "OptIn"
      ]
    },
    "143": {
      "op": "==",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "144": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "145": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "147": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "148": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "149": {
      "op": "return"
    },
    "150": {
      "block": "main_delete_application_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "152": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0",
        "DeleteApplication"
      ]
    },
    "154": {
      "op": "==",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "155": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "156": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "158": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "159": {
      "callsub": "smart_contracts.opinion_market.contract.OpinionTrading.delete_application",
      "op": "callsub delete_application"
    },
    "162": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "163": {
      "op": "return"
    },
    "164": {
      "block": "main_redeem_shares_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "166": {
      "op": "!",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "167": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "168": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "170": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "171": {
      "callsub": "smart_contracts.opinion_market.contract.OpinionTrading.redeem_shares",
      "op": "callsub redeem_shares"
    },
    "174": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "175": {
      "op": "return"
    },
    "176": {
      "block": "main_settle_market_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "178": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "179": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "180": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "182": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "183": {
      "callsub": "smart_contracts.opinion_market.contract.OpinionTrading.settle_market",
      "op": "callsub settle_market"
    },
    "186": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "187": {
      "op": "return"
    },
    "188": {
      "block": "main_buy_shares_b_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "190": {
      "op": "!",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "191": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "192": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "194": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "195": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "197": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "1"
      ]
    },
    "198": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "199": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "200": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "202": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "203": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ],
      "stack_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "204": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%1#0"
      ]
    },
    "205": {
      "callsub": "smart_contracts.opinion_market.contract.OpinionTrading.buy_shares_b",
      "op": "callsub buy_shares_b",
      "stack_out": []
    },
    "208": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "209": {
      "op": "return"
    },
    "210": {
      "block": "main_buy_shares_a_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "212": {
      "op": "!",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "213": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "214": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "216": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "217": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "219": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "1"
      ]
    },
    "220": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "221": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "222": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "224": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "225": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "226": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "gtxn_idx%0#0"
      ]
    },
    "227": {
      "callsub": "smart_contracts.opinion_market.contract.OpinionTrading.buy_shares_a",
      "op": "callsub buy_shares_a",
      "stack_out": []
    },
    "230": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "231": {
      "op": "return"
    },
    "232": {
      "block": "main_create_market_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "234": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "235": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "236": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "238": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "239": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "240": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "243": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "246": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "249": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "252": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "255": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "258": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%13#0"
      ]
    },
    "261": {
      "op": "btoi",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%14#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0",
        "tmp%14#0"
      ]
    },
    "262": {
      "callsub": "smart_contracts.opinion_market.contract.OpinionTrading.create_market",
      "op": "callsub create_market",
      "stack_out": []
    },
    "265": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "266": {
      "op": "return"
    },
    "267": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.create_market",
      "params": {
        "market_question#0": "bytes",
        "outcome_a#0": "bytes",
        "outcome_b#0": "bytes",
        "expiration_time#0": "uint64"
      },
      "block": "create_market",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "270": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "272": {
      "op": "frame_dig -1",
      "defined_out": [
        "expiration_time#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "expiration_time#0 (copy)"
      ]
    },
    "274": {
      "op": "+",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "275": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "277": {
      "op": ">",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "278": {
      "error": "Expiration time must be in the future",
      "op": "assert // Expiration time must be in the future",
      "stack_out": []
    },
    "279": {
      "op": "bytec 4 // \"creator\""
    },
    "281": {
      "op": "txn Sender",
      "defined_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"creator\"",
        "new_state_value%0#0"
      ]
    },
    "283": {
      "op": "app_global_put",
      "stack_out": []
    },
    "284": {
      "op": "pushbytes \"market_question\"",
      "defined_out": [
        "\"market_question\""
      ],
      "stack_out": [
        "\"market_question\""
      ]
    },
    "301": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"market_question\"",
        "market_question#0 (copy)"
      ],
      "stack_out": [
        "\"market_question\"",
        "market_question#0 (copy)"
      ]
    },
    "303": {
      "op": "app_global_put",
      "stack_out": []
    },
    "304": {
      "op": "pushbytes \"outcome_a\"",
      "defined_out": [
        "\"outcome_a\""
      ],
      "stack_out": [
        "\"outcome_a\""
      ]
    },
    "315": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"outcome_a\"",
        "outcome_a#0 (copy)"
      ],
      "stack_out": [
        "\"outcome_a\"",
        "outcome_a#0 (copy)"
      ]
    },
    "317": {
      "op": "app_global_put",
      "stack_out": []
    },
    "318": {
      "op": "pushbytes \"outcome_b\"",
      "defined_out": [
        "\"outcome_b\""
      ],
      "stack_out": [
        "\"outcome_b\""
      ]
    },
    "329": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"outcome_b\"",
        "outcome_b#0 (copy)"
      ],
      "stack_out": [
        "\"outcome_b\"",
        "outcome_b#0 (copy)"
      ]
    },
    "331": {
      "op": "app_global_put",
      "stack_out": []
    },
    "332": {
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\""
      ],
      "stack_out": [
        "\"outcome\""
      ]
    },
    "333": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"outcome\"",
        "0"
      ],
      "stack_out": [
        "\"outcome\"",
        "0"
      ]
    },
    "334": {
      "op": "app_global_put",
      "stack_out": []
    },
    "335": {
      "op": "bytec_2 // \"shares_a\"",
      "defined_out": [
        "\"shares_a\""
      ],
      "stack_out": [
        "\"shares_a\""
      ]
    },
    "336": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"shares_a\"",
        "0"
      ]
    },
    "337": {
      "op": "app_global_put",
      "stack_out": []
    },
    "338": {
      "op": "bytec_1 // \"shares_b\"",
      "defined_out": [
        "\"shares_b\""
      ],
      "stack_out": [
        "\"shares_b\""
      ]
    },
    "339": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"shares_b\"",
        "0"
      ]
    },
    "340": {
      "op": "app_global_put",
      "stack_out": []
    },
    "341": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "343": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%4#0",
        "expiration_time#0 (copy)"
      ]
    },
    "345": {
      "op": "+",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "346": {
      "op": "bytec 5 // \"expiration_time\"",
      "defined_out": [
        "\"expiration_time\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0",
        "\"expiration_time\""
      ]
    },
    "348": {
      "op": "swap",
      "stack_out": [
        "\"expiration_time\"",
        "new_state_value%1#0"
      ]
    },
    "349": {
      "op": "app_global_put",
      "stack_out": []
    },
    "350": {
      "retsub": true,
      "op": "retsub"
    },
    "351": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.buy_shares_a",
      "params": {
        "payment#0": "uint64"
      },
      "block": "buy_shares_a",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "354": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "355": {
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"outcome\""
      ]
    },
    "356": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "357": {
      "error": "check self.outcome exists",
      "op": "assert // check self.outcome exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "358": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "359": {
      "error": "Market is already settled",
      "op": "assert // Market is already settled",
      "stack_out": []
    },
    "360": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "362": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "363": {
      "op": "bytec 5 // \"expiration_time\"",
      "defined_out": [
        "\"expiration_time\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"expiration_time\""
      ]
    },
    "365": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "366": {
      "error": "check self.expiration_time exists",
      "op": "assert // check self.expiration_time exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "367": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "368": {
      "error": "Market has expired",
      "op": "assert // Market has expired",
      "stack_out": []
    },
    "369": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "371": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "373": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "375": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "376": {
      "op": "assert",
      "stack_out": []
    },
    "377": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "378": {
      "op": "bytec_1 // \"shares_b\"",
      "defined_out": [
        "\"shares_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"shares_b\""
      ]
    },
    "379": {
      "op": "app_global_get_ex",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "380": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "382": {
      "error": "check self.shares_b exists",
      "op": "assert // check self.shares_b exists",
      "stack_out": []
    },
    "383": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "385": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "387": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "1000000"
      ]
    },
    "388": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "389": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": []
    },
    "390": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "392": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "393": {
      "op": "bytec_3 // \"localState\"",
      "defined_out": [
        "\"localState\"",
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"localState\""
      ]
    },
    "394": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exist#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "exist#0"
      ]
    },
    "395": {
      "op": "bury 1",
      "stack_out": [
        "exist#0"
      ]
    },
    "397": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "398": {
      "error": "Already ADDED OPINION",
      "op": "assert // Already ADDED OPINION",
      "stack_out": []
    },
    "399": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "401": {
      "op": "bytec_3 // \"localState\"",
      "stack_out": [
        "tmp%10#0",
        "\"localState\""
      ]
    },
    "402": {
      "op": "intc_1 // 1",
      "defined_out": [
        "\"localState\"",
        "1",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"localState\"",
        "1"
      ]
    },
    "403": {
      "op": "app_local_put",
      "stack_out": []
    },
    "404": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "405": {
      "op": "bytec_2 // \"shares_a\"",
      "defined_out": [
        "\"shares_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"shares_a\""
      ]
    },
    "406": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "407": {
      "error": "check self.shares_a exists",
      "op": "assert // check self.shares_a exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "408": {
      "op": "intc_1 // 1",
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "409": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "410": {
      "op": "bytec_2 // \"shares_a\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"shares_a\""
      ]
    },
    "411": {
      "op": "swap",
      "stack_out": [
        "\"shares_a\"",
        "new_state_value%0#0"
      ]
    },
    "412": {
      "op": "app_global_put",
      "stack_out": []
    },
    "413": {
      "retsub": true,
      "op": "retsub"
    },
    "414": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.buy_shares_b",
      "params": {
        "payment#0": "uint64"
      },
      "block": "buy_shares_b",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "417": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "418": {
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"outcome\""
      ]
    },
    "419": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "420": {
      "error": "check self.outcome exists",
      "op": "assert // check self.outcome exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "421": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "error": "Market is already settled",
      "op": "assert // Market is already settled",
      "stack_out": []
    },
    "423": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%1#0",
        "0"
      ]
    },
    "426": {
      "op": "bytec 5 // \"expiration_time\"",
      "defined_out": [
        "\"expiration_time\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "0",
        "\"expiration_time\""
      ]
    },
    "428": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "429": {
      "error": "check self.expiration_time exists",
      "op": "assert // check self.expiration_time exists",
      "stack_out": [
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "430": {
      "op": "<",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "431": {
      "error": "Market has expired",
      "op": "assert // Market has expired",
      "stack_out": []
    },
    "432": {
      "op": "frame_dig -1",
      "defined_out": [
        "payment#0 (copy)"
      ],
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "434": {
      "op": "gtxns Receiver",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "436": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "438": {
      "op": "==",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "439": {
      "op": "assert",
      "stack_out": []
    },
    "440": {
      "op": "frame_dig -1",
      "stack_out": [
        "payment#0 (copy)"
      ]
    },
    "442": {
      "op": "gtxns Amount",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "444": {
      "op": "intc_2 // 1000000",
      "defined_out": [
        "1000000",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "1000000"
      ]
    },
    "445": {
      "op": "==",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "446": {
      "error": "Incorrect payment amount",
      "op": "assert // Incorrect payment amount",
      "stack_out": []
    },
    "447": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "449": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%8#0",
        "0"
      ]
    },
    "450": {
      "op": "bytec_3 // \"localState\"",
      "defined_out": [
        "\"localState\"",
        "0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "0",
        "\"localState\""
      ]
    },
    "451": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exist#0",
        "val#0"
      ],
      "stack_out": [
        "val#0",
        "exist#0"
      ]
    },
    "452": {
      "op": "bury 1",
      "stack_out": [
        "exist#0"
      ]
    },
    "454": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "455": {
      "error": "Already ADDED OPINION",
      "op": "assert // Already ADDED OPINION",
      "stack_out": []
    },
    "456": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "458": {
      "op": "bytec_3 // \"localState\"",
      "stack_out": [
        "tmp%10#0",
        "\"localState\""
      ]
    },
    "459": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"localState\"",
        "2",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0",
        "\"localState\"",
        "2"
      ]
    },
    "460": {
      "op": "app_local_put",
      "stack_out": []
    },
    "461": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "462": {
      "op": "bytec_1 // \"shares_b\"",
      "defined_out": [
        "\"shares_b\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"shares_b\""
      ]
    },
    "463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "464": {
      "error": "check self.shares_b exists",
      "op": "assert // check self.shares_b exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "465": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "1"
      ]
    },
    "466": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "467": {
      "op": "bytec_1 // \"shares_b\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"shares_b\""
      ]
    },
    "468": {
      "op": "swap",
      "stack_out": [
        "\"shares_b\"",
        "new_state_value%0#0"
      ]
    },
    "469": {
      "op": "app_global_put",
      "stack_out": []
    },
    "470": {
      "retsub": true,
      "op": "retsub"
    },
    "471": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.settle_market",
      "params": {},
      "block": "settle_market",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "474": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "477": {
      "op": "bytec 4 // \"creator\"",
      "defined_out": [
        "\"creator\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator\""
      ]
    },
    "479": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "480": {
      "error": "check self.creator exists",
      "op": "assert // check self.creator exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "481": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "482": {
      "error": "Only the creator can settle the market",
      "op": "assert // Only the creator can settle the market",
      "stack_out": []
    },
    "483": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "484": {
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"outcome\""
      ]
    },
    "485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "486": {
      "error": "check self.outcome exists",
      "op": "assert // check self.outcome exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "487": {
      "op": "!",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "488": {
      "error": "Market is already settled",
      "op": "assert // Market is already settled",
      "stack_out": []
    },
    "489": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "491": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "492": {
      "op": "bytec 5 // \"expiration_time\"",
      "defined_out": [
        "\"expiration_time\"",
        "0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "0",
        "\"expiration_time\""
      ]
    },
    "494": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "495": {
      "error": "check self.expiration_time exists",
      "op": "assert // check self.expiration_time exists",
      "stack_out": [
        "tmp%3#0",
        "maybe_value%2#0"
      ]
    },
    "496": {
      "op": ">=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "497": {
      "error": "Market has not expired yet",
      "op": "assert // Market has not expired yet",
      "stack_out": []
    },
    "498": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "499": {
      "op": "bytec_2 // \"shares_a\"",
      "defined_out": [
        "\"shares_a\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"shares_a\""
      ]
    },
    "500": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "501": {
      "error": "check self.shares_a exists",
      "op": "assert // check self.shares_a exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "502": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%3#0",
        "0"
      ]
    },
    "503": {
      "op": "bytec_1 // \"shares_b\"",
      "defined_out": [
        "\"shares_b\"",
        "0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "0",
        "\"shares_b\""
      ]
    },
    "504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "505": {
      "error": "check self.shares_b exists",
      "op": "assert // check self.shares_b exists",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "506": {
      "op": ">",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "507": {
      "op": "bz settle_market_else_body@2",
      "stack_out": []
    },
    "510": {
      "op": "bytec_0 // \"outcome\""
    },
    "511": {
      "op": "intc_1 // 1"
    },
    "512": {
      "op": "app_global_put"
    },
    "513": {
      "retsub": true,
      "op": "retsub"
    },
    "514": {
      "block": "settle_market_else_body@2",
      "stack_in": [],
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\""
      ],
      "stack_out": [
        "\"outcome\""
      ]
    },
    "515": {
      "op": "intc_3 // 2",
      "defined_out": [
        "\"outcome\"",
        "2"
      ],
      "stack_out": [
        "\"outcome\"",
        "2"
      ]
    },
    "516": {
      "op": "app_global_put",
      "stack_out": []
    },
    "517": {
      "retsub": true,
      "op": "retsub"
    },
    "518": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.redeem_shares",
      "params": {},
      "block": "redeem_shares",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "521": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "total_redistribution#0"
      ]
    },
    "523": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "0"
      ]
    },
    "524": {
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\"",
        "0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "0",
        "\"outcome\""
      ]
    },
    "525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "526": {
      "error": "check self.outcome exists",
      "op": "assert // check self.outcome exists",
      "stack_out": [
        "total_redistribution#0",
        "maybe_value%0#0"
      ]
    },
    "527": {
      "error": "Market is not settled yet",
      "op": "assert // Market is not settled yet",
      "stack_out": [
        "total_redistribution#0"
      ]
    },
    "528": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "tmp%1#0"
      ]
    },
    "530": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_redistribution#0",
        "tmp%1#0",
        "0"
      ]
    },
    "531": {
      "op": "bytec_3 // \"localState\"",
      "defined_out": [
        "\"localState\"",
        "0",
        "tmp%1#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "tmp%1#0",
        "0",
        "\"localState\""
      ]
    },
    "532": {
      "op": "app_local_get_ex",
      "defined_out": [
        "exist#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "exist#0"
      ]
    },
    "533": {
      "error": "User has not bought any shares",
      "op": "assert // User has not bought any shares",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0"
      ]
    },
    "535": {
      "op": "bytec_2 // \"shares_a\"",
      "defined_out": [
        "\"shares_a\"",
        "0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0",
        "\"shares_a\""
      ]
    },
    "536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "537": {
      "op": "bury 1",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_exists%2#0"
      ]
    },
    "539": {
      "error": "check self.shares_a exists",
      "op": "assert // check self.shares_a exists",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "540": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0"
      ]
    },
    "541": {
      "op": "bytec_1 // \"shares_b\"",
      "defined_out": [
        "\"shares_b\"",
        "0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0",
        "\"shares_b\""
      ]
    },
    "542": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "543": {
      "op": "bury 1",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_exists%3#0"
      ]
    },
    "545": {
      "error": "check self.shares_b exists",
      "op": "assert // check self.shares_b exists",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "546": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0"
      ]
    },
    "547": {
      "op": "bytec_0 // \"outcome\"",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0",
        "\"outcome\""
      ]
    },
    "548": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "549": {
      "error": "check self.outcome exists",
      "op": "assert // check self.outcome exists",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%4#0"
      ]
    },
    "550": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%4#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%4#0",
        "1"
      ]
    },
    "551": {
      "op": "==",
      "defined_out": [
        "tmp%2#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "tmp%2#0"
      ]
    },
    "552": {
      "op": "bz redeem_shares_else_body@2",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "555": {
      "op": "intc_0 // 0"
    },
    "556": {
      "op": "bytec_1 // \"shares_b\""
    },
    "557": {
      "op": "app_global_get_ex"
    },
    "558": {
      "error": "check self.shares_b exists",
      "op": "assert // check self.shares_b exists"
    },
    "559": {
      "block": "redeem_shares_after_if_else@3",
      "stack_in": [
        "total_redistribution#0",
        "user_choice#0",
        "wrong_shares#0"
      ],
      "op": "intc 4 // 500000",
      "defined_out": [
        "500000",
        "wrong_shares#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "wrong_shares#0",
        "500000"
      ]
    },
    "561": {
      "op": "*",
      "defined_out": [
        "total_redistribution#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "total_redistribution#0"
      ]
    },
    "562": {
      "op": "frame_bury 0",
      "defined_out": [
        "total_redistribution#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "564": {
      "op": "intc_0 // 0",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0"
      ]
    },
    "565": {
      "op": "bytec_0 // \"outcome\"",
      "defined_out": [
        "\"outcome\"",
        "0",
        "total_redistribution#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0",
        "\"outcome\""
      ]
    },
    "566": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "total_redistribution#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "567": {
      "error": "check self.outcome exists",
      "op": "assert // check self.outcome exists",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%7#0"
      ]
    },
    "568": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%7#0",
        "total_redistribution#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "maybe_value%7#0",
        "1"
      ]
    },
    "569": {
      "op": "==",
      "defined_out": [
        "tmp%3#0",
        "total_redistribution#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "tmp%3#0"
      ]
    },
    "570": {
      "op": "bz redeem_shares_else_body@8",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "573": {
      "op": "frame_dig 1"
    },
    "575": {
      "op": "intc_1 // 1"
    },
    "576": {
      "op": "=="
    },
    "577": {
      "op": "bz redeem_shares_else_body@6"
    },
    "580": {
      "op": "intc_0 // 0"
    },
    "581": {
      "op": "bytec_2 // \"shares_a\""
    },
    "582": {
      "op": "app_global_get_ex"
    },
    "583": {
      "error": "check self.shares_a exists",
      "op": "assert // check self.shares_a exists"
    },
    "584": {
      "op": "frame_dig 0"
    },
    "586": {
      "op": "swap"
    },
    "587": {
      "op": "/"
    },
    "588": {
      "op": "intc_2 // 1000000"
    },
    "589": {
      "op": "+"
    },
    "590": {
      "block": "redeem_shares_after_if_else@12",
      "stack_in": [
        "total_redistribution#0",
        "user_choice#0",
        "redeem_amount#0"
      ],
      "op": "intc 5 // 1000",
      "defined_out": [
        "1000",
        "redeem_amount#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "redeem_amount#0",
        "1000"
      ]
    },
    "592": {
      "op": "-",
      "defined_out": [
        "final_redeem_amount#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "final_redeem_amount#0"
      ]
    },
    "593": {
      "op": "itxn_begin"
    },
    "594": {
      "op": "txn Sender",
      "defined_out": [
        "final_redeem_amount#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "final_redeem_amount#0",
        "inner_txn_params%0%%param_Receiver_idx_0#0"
      ]
    },
    "596": {
      "op": "itxn_field Receiver"
    },
    "598": {
      "op": "itxn_field Amount",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "600": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "pay"
      ]
    },
    "601": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "603": {
      "op": "intc 5 // 1000",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "1000"
      ]
    },
    "605": {
      "op": "itxn_field Fee",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "607": {
      "op": "itxn_submit"
    },
    "608": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "tmp%8#0"
      ]
    },
    "610": {
      "op": "bytec_3 // \"localState\"",
      "defined_out": [
        "\"localState\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "tmp%8#0",
        "\"localState\""
      ]
    },
    "611": {
      "op": "app_local_del",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "612": {
      "retsub": true,
      "op": "retsub"
    },
    "613": {
      "block": "redeem_shares_else_body@6",
      "stack_in": [
        "total_redistribution#0",
        "user_choice#0"
      ],
      "op": "intc 4 // 500000",
      "defined_out": [
        "redeem_amount#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "redeem_amount#0"
      ]
    },
    "615": {
      "op": "b redeem_shares_after_if_else@12"
    },
    "618": {
      "block": "redeem_shares_else_body@8",
      "stack_in": [
        "total_redistribution#0",
        "user_choice#0"
      ],
      "op": "frame_dig 1",
      "defined_out": [
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "user_choice#0"
      ]
    },
    "620": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "user_choice#0",
        "2"
      ]
    },
    "621": {
      "op": "==",
      "defined_out": [
        "tmp%6#0",
        "user_choice#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "tmp%6#0"
      ]
    },
    "622": {
      "op": "bz redeem_shares_else_body@10",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0"
      ]
    },
    "625": {
      "op": "intc_0 // 0"
    },
    "626": {
      "op": "bytec_1 // \"shares_b\""
    },
    "627": {
      "op": "app_global_get_ex"
    },
    "628": {
      "error": "check self.shares_b exists",
      "op": "assert // check self.shares_b exists"
    },
    "629": {
      "op": "frame_dig 0"
    },
    "631": {
      "op": "swap"
    },
    "632": {
      "op": "/"
    },
    "633": {
      "op": "intc_2 // 1000000"
    },
    "634": {
      "op": "+"
    },
    "635": {
      "op": "b redeem_shares_after_if_else@12"
    },
    "638": {
      "block": "redeem_shares_else_body@10",
      "stack_in": [
        "total_redistribution#0",
        "user_choice#0"
      ],
      "op": "intc 4 // 500000",
      "defined_out": [
        "redeem_amount#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "redeem_amount#0"
      ]
    },
    "640": {
      "op": "b redeem_shares_after_if_else@12"
    },
    "643": {
      "block": "redeem_shares_else_body@2",
      "stack_in": [
        "total_redistribution#0",
        "user_choice#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0"
      ]
    },
    "644": {
      "op": "bytec_2 // \"shares_a\"",
      "defined_out": [
        "\"shares_a\"",
        "0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "0",
        "\"shares_a\""
      ]
    },
    "645": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "wrong_shares#0"
      ],
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "wrong_shares#0",
        "maybe_exists%6#0"
      ]
    },
    "646": {
      "error": "check self.shares_a exists",
      "op": "assert // check self.shares_a exists",
      "stack_out": [
        "total_redistribution#0",
        "user_choice#0",
        "wrong_shares#0"
      ]
    },
    "647": {
      "op": "b redeem_shares_after_if_else@3"
    },
    "650": {
      "subroutine": "smart_contracts.opinion_market.contract.OpinionTrading.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "653": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "655": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "656": {
      "op": "bytec 4 // \"creator\"",
      "defined_out": [
        "\"creator\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"creator\""
      ]
    },
    "658": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "659": {
      "error": "check self.creator exists",
      "op": "assert // check self.creator exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "660": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "661": {
      "error": "Only the creator can delete the application",
      "op": "assert // Only the creator can delete the application",
      "stack_out": []
    },
    "662": {
      "op": "itxn_begin"
    },
    "663": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "664": {
      "op": "bytec 4 // \"creator\"",
      "stack_out": [
        "0",
        "\"creator\""
      ]
    },
    "666": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "667": {
      "error": "check self.creator exists",
      "op": "assert // check self.creator exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "668": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "669": {
      "op": "bytec 4 // \"creator\"",
      "stack_out": [
        "maybe_value%1#0",
        "0",
        "\"creator\""
      ]
    },
    "671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "672": {
      "error": "check self.creator exists",
      "op": "assert // check self.creator exists",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "673": {
      "op": "itxn_field CloseRemainderTo",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "675": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%1#0",
        "0"
      ]
    },
    "676": {
      "op": "itxn_field Amount",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "678": {
      "op": "itxn_field Receiver",
      "stack_out": []
    },
    "680": {
      "op": "intc_1 // pay",
      "defined_out": [
        "pay"
      ],
      "stack_out": [
        "pay"
      ]
    },
    "681": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "683": {
      "op": "intc 5 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "685": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "687": {
      "op": "itxn_submit"
    },
    "688": {
      "retsub": true,
      "op": "retsub"
    }
  }
}