#pragma version 10
#pragma typetrack false

// smart_contracts.opinion_market.contract.OpinionTrading.__algopy_entrypoint_with_init() -> uint64:
main:
    intcblock 0 1 1000000 2 500000 1000
    bytecblock "outcome" "shares_b" "shares_a" "localState" "creator" "expiration_time"
    // smart_contracts/opinion_market/contract.py:4
    // class OpinionTrading(ARC4Contract):
    txn NumAppArgs
    bz main_after_if_else@12
    pushbytess 0xcc6ddfbf 0x9bef0340 0x4c0f99f0 0xdf4973e5 0x1d53b496 0x33b3499e 0x30c6d58a // method "create_market(string,string,string,uint64)void", method "buy_shares_a(pay)void", method "buy_shares_b(pay)void", method "settle_market()void", method "redeem_shares()void", method "delete_application()void", method "opt_in()void"
    txna ApplicationArgs 0
    match main_create_market_route@5 main_buy_shares_a_route@6 main_buy_shares_b_route@7 main_settle_market_route@8 main_redeem_shares_route@9 main_delete_application_route@10 main_opt_in_route@11

main_after_if_else@12:
    // smart_contracts/opinion_market/contract.py:4
    // class OpinionTrading(ARC4Contract):
    intc_0 // 0
    return

main_opt_in_route@11:
    // smart_contracts/opinion_market/contract.py:153
    // @abimethod(allow_actions=['OptIn'])
    txn OnCompletion
    intc_1 // OptIn
    ==
    assert // OnCompletion is not OptIn
    txn ApplicationID
    assert // can only call when not creating
    intc_1 // 1
    return

main_delete_application_route@10:
    // smart_contracts/opinion_market/contract.py:140-141
    // # Delete the application (only the creator can delete)
    // @abimethod(allow_actions=["DeleteApplication"])
    txn OnCompletion
    pushint 5 // DeleteApplication
    ==
    assert // OnCompletion is not DeleteApplication
    txn ApplicationID
    assert // can only call when not creating
    callsub delete_application
    intc_1 // 1
    return

main_redeem_shares_route@9:
    // smart_contracts/opinion_market/contract.py:89-90
    // # Redeem shares after the market is settled
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub redeem_shares
    intc_1 // 1
    return

main_settle_market_route@8:
    // smart_contracts/opinion_market/contract.py:77-78
    // # Settle the market (only the creator can settle)
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub settle_market
    intc_1 // 1
    return

main_buy_shares_b_route@7:
    // smart_contracts/opinion_market/contract.py:64-65
    // # Buy shares for Outcome B
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/opinion_market/contract.py:4
    // class OpinionTrading(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/opinion_market/contract.py:64-65
    // # Buy shares for Outcome B
    // @abimethod()
    callsub buy_shares_b
    intc_1 // 1
    return

main_buy_shares_a_route@6:
    // smart_contracts/opinion_market/contract.py:49-50
    // # Buy shares for Outcome A
    // @abimethod()
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/opinion_market/contract.py:4
    // class OpinionTrading(ARC4Contract):
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/opinion_market/contract.py:49-50
    // # Buy shares for Outcome A
    // @abimethod()
    callsub buy_shares_a
    intc_1 // 1
    return

main_create_market_route@5:
    // smart_contracts/opinion_market/contract.py:19-20
    // # Create the opinion market
    // @abimethod(allow_actions=["NoOp"], create="require")
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/opinion_market/contract.py:4
    // class OpinionTrading(ARC4Contract):
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    extract 2 0
    txna ApplicationArgs 4
    btoi
    // smart_contracts/opinion_market/contract.py:19-20
    // # Create the opinion market
    // @abimethod(allow_actions=["NoOp"], create="require")
    callsub create_market
    intc_1 // 1
    return


// smart_contracts.opinion_market.contract.OpinionTrading.create_market(market_question: bytes, outcome_a: bytes, outcome_b: bytes, expiration_time: uint64) -> void:
create_market:
    // smart_contracts/opinion_market/contract.py:19-27
    // # Create the opinion market
    // @abimethod(allow_actions=["NoOp"], create="require")
    // def create_market(
    //     self,
    //     market_question: String,
    //     outcome_a: String,
    //     outcome_b: String,
    //     expiration_time: UInt64,  # Expiration time in Unix timestamp
    // ) -> None:
    proto 4 0
    // smart_contracts/opinion_market/contract.py:28
    // assert Global.latest_timestamp + expiration_time > Global.latest_timestamp, "Expiration time must be in the future"
    global LatestTimestamp
    frame_dig -1
    +
    global LatestTimestamp
    >
    assert // Expiration time must be in the future
    // smart_contracts/opinion_market/contract.py:29
    // self.creator = Txn.sender
    bytec 4 // "creator"
    txn Sender
    app_global_put
    // smart_contracts/opinion_market/contract.py:30
    // self.market_question = market_question
    pushbytes "market_question"
    frame_dig -4
    app_global_put
    // smart_contracts/opinion_market/contract.py:31
    // self.outcome_a = outcome_a
    pushbytes "outcome_a"
    frame_dig -3
    app_global_put
    // smart_contracts/opinion_market/contract.py:32
    // self.outcome_b = outcome_b
    pushbytes "outcome_b"
    frame_dig -2
    app_global_put
    // smart_contracts/opinion_market/contract.py:33
    // self.outcome = UInt64(0)  # Market is not settled yet
    bytec_0 // "outcome"
    intc_0 // 0
    app_global_put
    // smart_contracts/opinion_market/contract.py:34
    // self.shares_a = UInt64(0)
    bytec_2 // "shares_a"
    intc_0 // 0
    app_global_put
    // smart_contracts/opinion_market/contract.py:35
    // self.shares_b = UInt64(0)
    bytec_1 // "shares_b"
    intc_0 // 0
    app_global_put
    // smart_contracts/opinion_market/contract.py:36
    // self.expiration_time = Global.latest_timestamp + expiration_time
    global LatestTimestamp
    frame_dig -1
    +
    bytec 5 // "expiration_time"
    swap
    app_global_put
    retsub


// smart_contracts.opinion_market.contract.OpinionTrading.buy_shares_a(payment: uint64) -> void:
buy_shares_a:
    // smart_contracts/opinion_market/contract.py:49-51
    // # Buy shares for Outcome A
    // @abimethod()
    // def buy_shares_a(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/opinion_market/contract.py:52
    // assert self.outcome == 0, "Market is already settled"
    intc_0 // 0
    bytec_0 // "outcome"
    app_global_get_ex
    assert // check self.outcome exists
    !
    assert // Market is already settled
    // smart_contracts/opinion_market/contract.py:53
    // assert Global.latest_timestamp < self.expiration_time, "Market has expired"
    global LatestTimestamp
    intc_0 // 0
    bytec 5 // "expiration_time"
    app_global_get_ex
    assert // check self.expiration_time exists
    <
    assert // Market has expired
    // smart_contracts/opinion_market/contract.py:54
    // assert payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/opinion_market/contract.py:42
    // return self.shares_b + UInt64(1)  # Price increases with more shares of Outcome B
    intc_0 // 0
    bytec_1 // "shares_b"
    app_global_get_ex
    bury 1
    assert // check self.shares_b exists
    // smart_contracts/opinion_market/contract.py:56
    // assert payment.amount == 1_000_000, "Incorrect payment amount"
    frame_dig -1
    gtxns Amount
    intc_2 // 1000000
    ==
    assert // Incorrect payment amount
    // smart_contracts/opinion_market/contract.py:57
    // val,exist = self.localState.maybe(Txn.sender)
    txn Sender
    intc_0 // 0
    bytec_3 // "localState"
    app_local_get_ex
    bury 1
    // smart_contracts/opinion_market/contract.py:58
    // assert not exist, "Already ADDED OPINION"
    !
    assert // Already ADDED OPINION
    // smart_contracts/opinion_market/contract.py:59
    // self.localState[Txn.sender] = UInt64(1)
    txn Sender
    bytec_3 // "localState"
    intc_1 // 1
    app_local_put
    // smart_contracts/opinion_market/contract.py:62
    // self.shares_a += 1
    intc_0 // 0
    bytec_2 // "shares_a"
    app_global_get_ex
    assert // check self.shares_a exists
    intc_1 // 1
    +
    bytec_2 // "shares_a"
    swap
    app_global_put
    retsub


// smart_contracts.opinion_market.contract.OpinionTrading.buy_shares_b(payment: uint64) -> void:
buy_shares_b:
    // smart_contracts/opinion_market/contract.py:64-66
    // # Buy shares for Outcome B
    // @abimethod()
    // def buy_shares_b(self, payment: gtxn.PaymentTransaction) -> None:
    proto 1 0
    // smart_contracts/opinion_market/contract.py:67
    // assert self.outcome == 0, "Market is already settled"
    intc_0 // 0
    bytec_0 // "outcome"
    app_global_get_ex
    assert // check self.outcome exists
    !
    assert // Market is already settled
    // smart_contracts/opinion_market/contract.py:68
    // assert Global.latest_timestamp < self.expiration_time, "Market has expired"
    global LatestTimestamp
    intc_0 // 0
    bytec 5 // "expiration_time"
    app_global_get_ex
    assert // check self.expiration_time exists
    <
    assert // Market has expired
    // smart_contracts/opinion_market/contract.py:69
    // assert payment.receiver == Global.current_application_address
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert
    // smart_contracts/opinion_market/contract.py:70
    // assert payment.amount == 1_000_000, "Incorrect payment amount"
    frame_dig -1
    gtxns Amount
    intc_2 // 1000000
    ==
    assert // Incorrect payment amount
    // smart_contracts/opinion_market/contract.py:71
    // val,exist = self.localState.maybe(Txn.sender)
    txn Sender
    intc_0 // 0
    bytec_3 // "localState"
    app_local_get_ex
    bury 1
    // smart_contracts/opinion_market/contract.py:72
    // assert not exist, "Already ADDED OPINION"
    !
    assert // Already ADDED OPINION
    // smart_contracts/opinion_market/contract.py:73
    // self.localState[Txn.sender] = UInt64(2)
    txn Sender
    bytec_3 // "localState"
    intc_3 // 2
    app_local_put
    // smart_contracts/opinion_market/contract.py:75
    // self.shares_b += 1
    intc_0 // 0
    bytec_1 // "shares_b"
    app_global_get_ex
    assert // check self.shares_b exists
    intc_1 // 1
    +
    bytec_1 // "shares_b"
    swap
    app_global_put
    retsub


// smart_contracts.opinion_market.contract.OpinionTrading.settle_market() -> void:
settle_market:
    // smart_contracts/opinion_market/contract.py:77-79
    // # Settle the market (only the creator can settle)
    // @abimethod()
    // def settle_market(self) -> None:
    proto 0 0
    // smart_contracts/opinion_market/contract.py:80
    // assert Txn.sender == self.creator, "Only the creator can settle the market"
    txn Sender
    intc_0 // 0
    bytec 4 // "creator"
    app_global_get_ex
    assert // check self.creator exists
    ==
    assert // Only the creator can settle the market
    // smart_contracts/opinion_market/contract.py:81
    // assert self.outcome == UInt64(0), "Market is already settled"
    intc_0 // 0
    bytec_0 // "outcome"
    app_global_get_ex
    assert // check self.outcome exists
    !
    assert // Market is already settled
    // smart_contracts/opinion_market/contract.py:82
    // assert Global.latest_timestamp >= self.expiration_time, "Market has not expired yet"
    global LatestTimestamp
    intc_0 // 0
    bytec 5 // "expiration_time"
    app_global_get_ex
    assert // check self.expiration_time exists
    >=
    assert // Market has not expired yet
    // smart_contracts/opinion_market/contract.py:84
    // if self.shares_a > self.shares_b:
    intc_0 // 0
    bytec_2 // "shares_a"
    app_global_get_ex
    assert // check self.shares_a exists
    intc_0 // 0
    bytec_1 // "shares_b"
    app_global_get_ex
    assert // check self.shares_b exists
    >
    bz settle_market_else_body@2
    // smart_contracts/opinion_market/contract.py:85
    // self.outcome = UInt64(1)
    bytec_0 // "outcome"
    intc_1 // 1
    app_global_put
    retsub

settle_market_else_body@2:
    // smart_contracts/opinion_market/contract.py:87
    // self.outcome = UInt64(2)
    bytec_0 // "outcome"
    intc_3 // 2
    app_global_put
    retsub


// smart_contracts.opinion_market.contract.OpinionTrading.redeem_shares() -> void:
redeem_shares:
    // smart_contracts/opinion_market/contract.py:89-91
    // # Redeem shares after the market is settled
    // @abimethod()
    // def redeem_shares(self) -> None:
    proto 0 0
    pushbytes ""
    // smart_contracts/opinion_market/contract.py:92
    // assert self.outcome != 0, "Market is not settled yet"
    intc_0 // 0
    bytec_0 // "outcome"
    app_global_get_ex
    assert // check self.outcome exists
    assert // Market is not settled yet
    // smart_contracts/opinion_market/contract.py:94-95
    // # Check if the user has bought shares
    // user_choice, exist = self.localState.maybe(Txn.sender)
    txn Sender
    intc_0 // 0
    bytec_3 // "localState"
    app_local_get_ex
    // smart_contracts/opinion_market/contract.py:96
    // assert exist, "User has not bought any shares"
    assert // User has not bought any shares
    // smart_contracts/opinion_market/contract.py:98-99
    // # Calculate the total shares for both outcomes
    // total_shares = self.shares_a + self.shares_b
    intc_0 // 0
    bytec_2 // "shares_a"
    app_global_get_ex
    bury 1
    assert // check self.shares_a exists
    intc_0 // 0
    bytec_1 // "shares_b"
    app_global_get_ex
    bury 1
    assert // check self.shares_b exists
    // smart_contracts/opinion_market/contract.py:101-102
    // # Calculate the total amount to be redistributed from wrong opinions
    // if self.outcome == 1:  # Outcome A won
    intc_0 // 0
    bytec_0 // "outcome"
    app_global_get_ex
    assert // check self.outcome exists
    intc_1 // 1
    ==
    bz redeem_shares_else_body@2
    // smart_contracts/opinion_market/contract.py:103
    // wrong_shares = self.shares_b
    intc_0 // 0
    bytec_1 // "shares_b"
    app_global_get_ex
    assert // check self.shares_b exists

redeem_shares_after_if_else@3:
    // smart_contracts/opinion_market/contract.py:107-108
    // # Total amount to be redistributed (50% of wrong opinions)
    // total_redistribution = wrong_shares * 500_000  # 0.5 Algo per wrong share
    intc 4 // 500000
    *
    frame_bury 0
    // smart_contracts/opinion_market/contract.py:110-111
    // # Calculate the redeem amount based on the outcome
    // if self.outcome == 1:  # Outcome A won
    intc_0 // 0
    bytec_0 // "outcome"
    app_global_get_ex
    assert // check self.outcome exists
    intc_1 // 1
    ==
    bz redeem_shares_else_body@8
    // smart_contracts/opinion_market/contract.py:112
    // if user_choice == 1:  # User bought shares for Outcome A (correct opinion)
    frame_dig 1
    intc_1 // 1
    ==
    bz redeem_shares_else_body@6
    // smart_contracts/opinion_market/contract.py:113-114
    // # User gets back 1 Algo + share of the redistribution
    // redeem_amount = UInt64(1_000_000) + (total_redistribution // self.shares_a)
    intc_0 // 0
    bytec_2 // "shares_a"
    app_global_get_ex
    assert // check self.shares_a exists
    frame_dig 0
    swap
    /
    intc_2 // 1000000
    +

redeem_shares_after_if_else@12:
    // smart_contracts/opinion_market/contract.py:127-128
    // # Deduct the fee from the user's redeem amount
    // final_redeem_amount = redeem_amount - UInt64(1_000)
    intc 5 // 1000
    -
    // smart_contracts/opinion_market/contract.py:130-135
    // # Transfer the redeemed amount to the sender
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=final_redeem_amount,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/opinion_market/contract.py:132
    // receiver=Txn.sender,
    txn Sender
    itxn_field Receiver
    itxn_field Amount
    // smart_contracts/opinion_market/contract.py:130-131
    // # Transfer the redeemed amount to the sender
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/opinion_market/contract.py:134
    // fee=1_000,
    intc 5 // 1000
    itxn_field Fee
    // smart_contracts/opinion_market/contract.py:130-135
    // # Transfer the redeemed amount to the sender
    // itxn.Payment(
    //     receiver=Txn.sender,
    //     amount=final_redeem_amount,
    //     fee=1_000,
    // ).submit()
    itxn_submit
    // smart_contracts/opinion_market/contract.py:137-138
    // # Reset the user's local state to prevent double redemption
    // del self.localState[Txn.sender]
    txn Sender
    bytec_3 // "localState"
    app_local_del
    retsub

redeem_shares_else_body@6:
    // smart_contracts/opinion_market/contract.py:116-117
    // # User gets back only 0.5 Algo
    // redeem_amount = UInt64(500_000)
    intc 4 // 500000
    b redeem_shares_after_if_else@12

redeem_shares_else_body@8:
    // smart_contracts/opinion_market/contract.py:119
    // if user_choice == 2:  # User bought shares for Outcome B (correct opinion)
    frame_dig 1
    intc_3 // 2
    ==
    bz redeem_shares_else_body@10
    // smart_contracts/opinion_market/contract.py:120-121
    // # User gets back 1 Algo + share of the redistribution
    // redeem_amount = UInt64(1_000_000) + (total_redistribution // self.shares_b)
    intc_0 // 0
    bytec_1 // "shares_b"
    app_global_get_ex
    assert // check self.shares_b exists
    frame_dig 0
    swap
    /
    intc_2 // 1000000
    +
    b redeem_shares_after_if_else@12

redeem_shares_else_body@10:
    // smart_contracts/opinion_market/contract.py:123-124
    // # User gets back only 0.5 Algo
    // redeem_amount = UInt64(500_000)
    intc 4 // 500000
    b redeem_shares_after_if_else@12

redeem_shares_else_body@2:
    // smart_contracts/opinion_market/contract.py:105
    // wrong_shares = self.shares_a
    intc_0 // 0
    bytec_2 // "shares_a"
    app_global_get_ex
    assert // check self.shares_a exists
    b redeem_shares_after_if_else@3


// smart_contracts.opinion_market.contract.OpinionTrading.delete_application() -> void:
delete_application:
    // smart_contracts/opinion_market/contract.py:140-142
    // # Delete the application (only the creator can delete)
    // @abimethod(allow_actions=["DeleteApplication"])
    // def delete_application(self) -> None:
    proto 0 0
    // smart_contracts/opinion_market/contract.py:143
    // assert Txn.sender == self.creator, "Only the creator can delete the application"
    txn Sender
    intc_0 // 0
    bytec 4 // "creator"
    app_global_get_ex
    assert // check self.creator exists
    ==
    assert // Only the creator can delete the application
    // smart_contracts/opinion_market/contract.py:145-151
    // # Transfer remaining funds to the creator
    // itxn.Payment(
    //     receiver=self.creator,
    //     amount=0,
    //     close_remainder_to=self.creator,
    //     fee=1_000,
    // ).submit()
    itxn_begin
    // smart_contracts/opinion_market/contract.py:147
    // receiver=self.creator,
    intc_0 // 0
    bytec 4 // "creator"
    app_global_get_ex
    assert // check self.creator exists
    // smart_contracts/opinion_market/contract.py:149
    // close_remainder_to=self.creator,
    intc_0 // 0
    bytec 4 // "creator"
    app_global_get_ex
    assert // check self.creator exists
    itxn_field CloseRemainderTo
    // smart_contracts/opinion_market/contract.py:148
    // amount=0,
    intc_0 // 0
    itxn_field Amount
    itxn_field Receiver
    // smart_contracts/opinion_market/contract.py:145-146
    // # Transfer remaining funds to the creator
    // itxn.Payment(
    intc_1 // pay
    itxn_field TypeEnum
    // smart_contracts/opinion_market/contract.py:150
    // fee=1_000,
    intc 5 // 1000
    itxn_field Fee
    // smart_contracts/opinion_market/contract.py:145-151
    // # Transfer remaining funds to the creator
    // itxn.Payment(
    //     receiver=self.creator,
    //     amount=0,
    //     close_remainder_to=self.creator,
    //     fee=1_000,
    // ).submit()
    itxn_submit
    retsub
