{
    "hints": {
        "create_market(string,string,string,uint64)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "buy_shares_a(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "buy_shares_b(pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "settle_market()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "redeem_shares()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "delete_application()void": {
            "call_config": {
                "delete_application": "CALL"
            }
        },
        "opt_in()void": {
            "call_config": {
                "opt_in": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 4,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 1
        }
    },
    "schema": {
        "global": {
            "declared": {
                "creator": {
                    "type": "bytes",
                    "key": "creator"
                },
                "expiration_time": {
                    "type": "uint64",
                    "key": "expiration_time"
                },
                "market_question": {
                    "type": "bytes",
                    "key": "market_question"
                },
                "outcome": {
                    "type": "uint64",
                    "key": "outcome"
                },
                "outcome_a": {
                    "type": "bytes",
                    "key": "outcome_a"
                },
                "outcome_b": {
                    "type": "bytes",
                    "key": "outcome_b"
                },
                "shares_a": {
                    "type": "uint64",
                    "key": "shares_a"
                },
                "shares_b": {
                    "type": "uint64",
                    "key": "shares_b"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {
                "localState": {
                    "type": "uint64",
                    "key": "localState"
                }
            },
            "reserved": {}
        }
    },
    "contract": {
        "name": "OpinionTrading",
        "methods": [
            {
                "name": "create_market",
                "args": [
                    {
                        "type": "string",
                        "name": "market_question"
                    },
                    {
                        "type": "string",
                        "name": "outcome_a"
                    },
                    {
                        "type": "string",
                        "name": "outcome_b"
                    },
                    {
                        "type": "uint64",
                        "name": "expiration_time"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy_shares_a",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "buy_shares_b",
                "args": [
                    {
                        "type": "pay",
                        "name": "payment"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "settle_market",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "redeem_shares",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "delete_application",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "opt_in",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}