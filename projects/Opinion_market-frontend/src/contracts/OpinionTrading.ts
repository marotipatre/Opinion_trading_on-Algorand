/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { AlgorandClientInterface } from '@algorandfoundation/algokit-utils/types/algorand-client-interface'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"OpinionTrading","structs":{},"methods":[{"name":"create_market","args":[{"name":"market_question","type":"string"},{"name":"outcome_a","type":"string"},{"name":"outcome_b","type":"string"},{"name":"expiration_time","type":"uint64"}],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"buy_shares_a","args":[{"name":"payment","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"buy_shares_b","args":[{"name":"payment","type":"pay"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"settle_market","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"redeem_shares","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"delete_application","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["DeleteApplication"]}}],"state":{"schema":{"global":{"ints":4,"bytes":4},"local":{"ints":0,"bytes":0}},"keys":{"global":{"creator":{"key":"Y3JlYXRvcg==","keyType":"AVMString","valueType":"AVMBytes"},"expiration_time":{"key":"ZXhwaXJhdGlvbl90aW1l","keyType":"AVMString","valueType":"AVMUint64"},"market_question":{"key":"bWFya2V0X3F1ZXN0aW9u","keyType":"AVMString","valueType":"AVMBytes"},"outcome":{"key":"b3V0Y29tZQ==","keyType":"AVMString","valueType":"AVMUint64"},"outcome_a":{"key":"b3V0Y29tZV9h","keyType":"AVMString","valueType":"AVMBytes"},"outcome_b":{"key":"b3V0Y29tZV9i","keyType":"AVMString","valueType":"AVMBytes"},"shares_a":{"key":"c2hhcmVzX2E=","keyType":"AVMString","valueType":"AVMUint64"},"shares_b":{"key":"c2hhcmVzX2I=","keyType":"AVMString","valueType":"AVMUint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgMTAwMDAwMCAxMDAwCiAgICBieXRlY2Jsb2NrICJvdXRjb21lIiAic2hhcmVzX2IiICJzaGFyZXNfYSIgImNyZWF0b3IiICJleHBpcmF0aW9uX3RpbWUiCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NAogICAgLy8gY2xhc3MgT3BpbmlvblRyYWRpbmcoQVJDNENvbnRyYWN0KToKICAgIHR4biBOdW1BcHBBcmdzCiAgICBieiBtYWluX2FmdGVyX2lmX2Vsc2VAMTIKICAgIHB1c2hieXRlc3MgMHhjYzZkZGZiZiAweDliZWYwMzQwIDB4NGMwZjk5ZjAgMHhkZjQ5NzNlNSAweDFkNTNiNDk2IDB4MzNiMzQ5OWUgLy8gbWV0aG9kICJjcmVhdGVfbWFya2V0KHN0cmluZyxzdHJpbmcsc3RyaW5nLHVpbnQ2NCl2b2lkIiwgbWV0aG9kICJidXlfc2hhcmVzX2EocGF5KXZvaWQiLCBtZXRob2QgImJ1eV9zaGFyZXNfYihwYXkpdm9pZCIsIG1ldGhvZCAic2V0dGxlX21hcmtldCgpdm9pZCIsIG1ldGhvZCAicmVkZWVtX3NoYXJlcygpdm9pZCIsIG1ldGhvZCAiZGVsZXRlX2FwcGxpY2F0aW9uKCl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVfbWFya2V0X3JvdXRlQDMgbWFpbl9idXlfc2hhcmVzX2Ffcm91dGVANCBtYWluX2J1eV9zaGFyZXNfYl9yb3V0ZUA1IG1haW5fc2V0dGxlX21hcmtldF9yb3V0ZUA2IG1haW5fcmVkZWVtX3NoYXJlc19yb3V0ZUA3IG1haW5fZGVsZXRlX2FwcGxpY2F0aW9uX3JvdXRlQDgKCm1haW5fYWZ0ZXJfaWZfZWxzZUAxMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBPcGluaW9uVHJhZGluZyhBUkM0Q29udHJhY3QpOgogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9kZWxldGVfYXBwbGljYXRpb25fcm91dGVAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToxMDEtMTAyCiAgICAvLyAjIERlbGV0ZSB0aGUgYXBwbGljYXRpb24gKG9ubHkgdGhlIGNyZWF0b3IgY2FuIGRlbGV0ZSkKICAgIC8vIEBhYmltZXRob2QoYWxsb3dfYWN0aW9ucz1bIkRlbGV0ZUFwcGxpY2F0aW9uIl0pCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBwdXNoaW50IDUgLy8gRGVsZXRlQXBwbGljYXRpb24KICAgID09CiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBEZWxldGVBcHBsaWNhdGlvbgogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIGRlbGV0ZV9hcHBsaWNhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9yZWRlZW1fc2hhcmVzX3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NzgtNzkKICAgIC8vICMgUmVkZWVtIHNoYXJlcyBhZnRlciB0aGUgbWFya2V0IGlzIHNldHRsZWQKICAgIC8vIEBhYmltZXRob2QoKQogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICBjYWxsc3ViIHJlZGVlbV9zaGFyZXMKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc2V0dGxlX21hcmtldF9yb3V0ZUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjY2LTY3CiAgICAvLyAjIFNldHRsZSB0aGUgbWFya2V0IChvbmx5IHRoZSBjcmVhdG9yIGNhbiBzZXR0bGUpCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBzZXR0bGVfbWFya2V0CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2J1eV9zaGFyZXNfYl9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjU2LTU3CiAgICAvLyAjIEJ1eSBzaGFyZXMgZm9yIE91dGNvbWUgQgogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBPcGluaW9uVHJhZGluZyhBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NTYtNTcKICAgIC8vICMgQnV5IHNoYXJlcyBmb3IgT3V0Y29tZSBCCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYnV5X3NoYXJlc19iCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2J1eV9zaGFyZXNfYV9yb3V0ZUA0OgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjQ0LTQ1CiAgICAvLyAjIEJ1eSBzaGFyZXMgZm9yIE91dGNvbWUgQQogICAgLy8gQGFiaW1ldGhvZCgpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo0CiAgICAvLyBjbGFzcyBPcGluaW9uVHJhZGluZyhBUkM0Q29udHJhY3QpOgogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NDQtNDUKICAgIC8vICMgQnV5IHNoYXJlcyBmb3IgT3V0Y29tZSBBCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIGNhbGxzdWIgYnV5X3NoYXJlc19hCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZV9tYXJrZXRfcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToxNS0xNgogICAgLy8gIyBDcmVhdGUgdGhlIG9waW5pb24gbWFya2V0CiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJOb09wIl0sIGNyZWF0ZT0icmVxdWlyZSIpCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjQKICAgIC8vIGNsYXNzIE9waW5pb25UcmFkaW5nKEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBleHRyYWN0IDIgMAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgZXh0cmFjdCAyIDAKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDMKICAgIGV4dHJhY3QgMiAwCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyA0CiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MTUtMTYKICAgIC8vICMgQ3JlYXRlIHRoZSBvcGluaW9uIG1hcmtldAogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCJdLCBjcmVhdGU9InJlcXVpcmUiKQogICAgY2FsbHN1YiBjcmVhdGVfbWFya2V0CiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gc21hcnRfY29udHJhY3RzLm9waW5pb25fbWFya2V0LmNvbnRyYWN0Lk9waW5pb25UcmFkaW5nLmNyZWF0ZV9tYXJrZXQobWFya2V0X3F1ZXN0aW9uOiBieXRlcywgb3V0Y29tZV9hOiBieXRlcywgb3V0Y29tZV9iOiBieXRlcywgZXhwaXJhdGlvbl90aW1lOiB1aW50NjQpIC0+IHZvaWQ6CmNyZWF0ZV9tYXJrZXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MTUtMjMKICAgIC8vICMgQ3JlYXRlIHRoZSBvcGluaW9uIG1hcmtldAogICAgLy8gQGFiaW1ldGhvZChhbGxvd19hY3Rpb25zPVsiTm9PcCJdLCBjcmVhdGU9InJlcXVpcmUiKQogICAgLy8gZGVmIGNyZWF0ZV9tYXJrZXQoCiAgICAvLyAgICAgc2VsZiwKICAgIC8vICAgICBtYXJrZXRfcXVlc3Rpb246IFN0cmluZywKICAgIC8vICAgICBvdXRjb21lX2E6IFN0cmluZywKICAgIC8vICAgICBvdXRjb21lX2I6IFN0cmluZywKICAgIC8vICAgICBleHBpcmF0aW9uX3RpbWU6IFVJbnQ2NCwgICMgRXhwaXJhdGlvbiB0aW1lIGluIFVuaXggdGltZXN0YW1wCiAgICAvLyApIC0+IE5vbmU6CiAgICBwcm90byA0IDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToyNAogICAgLy8gYXNzZXJ0IEdsb2JhbC5sYXRlc3RfdGltZXN0YW1wICsgZXhwaXJhdGlvbl90aW1lID4gR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAsICJFeHBpcmF0aW9uIHRpbWUgbXVzdCBiZSBpbiB0aGUgZnV0dXJlIgogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICBnbG9iYWwgTGF0ZXN0VGltZXN0YW1wCiAgICA+CiAgICBhc3NlcnQgLy8gRXhwaXJhdGlvbiB0aW1lIG11c3QgYmUgaW4gdGhlIGZ1dHVyZQogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjI1CiAgICAvLyBzZWxmLmNyZWF0b3IgPSBUeG4uc2VuZGVyCiAgICBieXRlY18zIC8vICJjcmVhdG9yIgogICAgdHhuIFNlbmRlcgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToyNgogICAgLy8gc2VsZi5tYXJrZXRfcXVlc3Rpb24gPSBtYXJrZXRfcXVlc3Rpb24KICAgIHB1c2hieXRlcyAibWFya2V0X3F1ZXN0aW9uIgogICAgZnJhbWVfZGlnIC00CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjI3CiAgICAvLyBzZWxmLm91dGNvbWVfYSA9IG91dGNvbWVfYQogICAgcHVzaGJ5dGVzICJvdXRjb21lX2EiCiAgICBmcmFtZV9kaWcgLTMKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MjgKICAgIC8vIHNlbGYub3V0Y29tZV9iID0gb3V0Y29tZV9iCiAgICBwdXNoYnl0ZXMgIm91dGNvbWVfYiIKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToyOQogICAgLy8gc2VsZi5vdXRjb21lID0gVUludDY0KDApICAjIE1hcmtldCBpcyBub3Qgc2V0dGxlZCB5ZXQKICAgIGJ5dGVjXzAgLy8gIm91dGNvbWUiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTozMAogICAgLy8gc2VsZi5zaGFyZXNfYSA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMiAvLyAic2hhcmVzX2EiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTozMQogICAgLy8gc2VsZi5zaGFyZXNfYiA9IFVJbnQ2NCgwKQogICAgYnl0ZWNfMSAvLyAic2hhcmVzX2IiCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTozMgogICAgLy8gc2VsZi5leHBpcmF0aW9uX3RpbWUgPSBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCArIGV4cGlyYXRpb25fdGltZQogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICBieXRlYyA0IC8vICJleHBpcmF0aW9uX3RpbWUiCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9waW5pb25fbWFya2V0LmNvbnRyYWN0Lk9waW5pb25UcmFkaW5nLmJ1eV9zaGFyZXNfYShwYXltZW50OiB1aW50NjQpIC0+IHZvaWQ6CmJ1eV9zaGFyZXNfYToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo0NC00NgogICAgLy8gIyBCdXkgc2hhcmVzIGZvciBPdXRjb21lIEEKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIGJ1eV9zaGFyZXNfYShzZWxmLCBwYXltZW50OiBndHhuLlBheW1lbnRUcmFuc2FjdGlvbikgLT4gTm9uZToKICAgIHByb3RvIDEgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjQ3CiAgICAvLyBhc3NlcnQgc2VsZi5vdXRjb21lID09IDAsICJNYXJrZXQgaXMgYWxyZWFkeSBzZXR0bGVkIgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gIm91dGNvbWUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYub3V0Y29tZSBleGlzdHMKICAgICEKICAgIGFzc2VydCAvLyBNYXJrZXQgaXMgYWxyZWFkeSBzZXR0bGVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NDgKICAgIC8vIGFzc2VydCBHbG9iYWwubGF0ZXN0X3RpbWVzdGFtcCA8IHNlbGYuZXhwaXJhdGlvbl90aW1lLCAiTWFya2V0IGhhcyBleHBpcmVkIgogICAgZ2xvYmFsIExhdGVzdFRpbWVzdGFtcAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDQgLy8gImV4cGlyYXRpb25fdGltZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5leHBpcmF0aW9uX3RpbWUgZXhpc3RzCiAgICA8CiAgICBhc3NlcnQgLy8gTWFya2V0IGhhcyBleHBpcmVkCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NDkKICAgIC8vIGFzc2VydCBwYXltZW50LnJlY2VpdmVyID09IEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MKICAgIGZyYW1lX2RpZyAtMQogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MzcKICAgIC8vIHJldHVybiBzZWxmLnNoYXJlc19iICsgVUludDY0KDEpICAjIFByaWNlIGluY3JlYXNlcyB3aXRoIG1vcmUgc2hhcmVzIG9mIE91dGNvbWUgQgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInNoYXJlc19iIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuc2hhcmVzX2IgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NTEKICAgIC8vIGFzc2VydCBwYXltZW50LmFtb3VudCA9PSAxXzAwMF8wMDAsICJJbmNvcnJlY3QgcGF5bWVudCBhbW91bnQiCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIEFtb3VudAogICAgaW50Y18yIC8vIDEwMDAwMDAKICAgID09CiAgICBhc3NlcnQgLy8gSW5jb3JyZWN0IHBheW1lbnQgYW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NTQKICAgIC8vIHNlbGYuc2hhcmVzX2EgKz0gMQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInNoYXJlc19hIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNoYXJlc19hIGV4aXN0cwogICAgaW50Y18xIC8vIDEKICAgICsKICAgIGJ5dGVjXzIgLy8gInNoYXJlc19hIgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGluaW9uX21hcmtldC5jb250cmFjdC5PcGluaW9uVHJhZGluZy5idXlfc2hhcmVzX2IocGF5bWVudDogdWludDY0KSAtPiB2b2lkOgpidXlfc2hhcmVzX2I6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NTYtNTgKICAgIC8vICMgQnV5IHNoYXJlcyBmb3IgT3V0Y29tZSBCCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiBidXlfc2hhcmVzX2Ioc2VsZiwgcGF5bWVudDogZ3R4bi5QYXltZW50VHJhbnNhY3Rpb24pIC0+IE5vbmU6CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo1OQogICAgLy8gYXNzZXJ0IHNlbGYub3V0Y29tZSA9PSAwLCAiTWFya2V0IGlzIGFscmVhZHkgc2V0dGxlZCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJvdXRjb21lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm91dGNvbWUgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gTWFya2V0IGlzIGFscmVhZHkgc2V0dGxlZAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjYwCiAgICAvLyBhc3NlcnQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPCBzZWxmLmV4cGlyYXRpb25fdGltZSwgIk1hcmtldCBoYXMgZXhwaXJlZCIKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJleHBpcmF0aW9uX3RpbWUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZXhwaXJhdGlvbl90aW1lIGV4aXN0cwogICAgPAogICAgYXNzZXJ0IC8vIE1hcmtldCBoYXMgZXhwaXJlZAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjYxCiAgICAvLyBhc3NlcnQgcGF5bWVudC5yZWNlaXZlciA9PSBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzCiAgICBmcmFtZV9kaWcgLTEKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjYyCiAgICAvLyBhc3NlcnQgcGF5bWVudC5hbW91bnQgPT0gMV8wMDBfMDAwLCAiSW5jb3JyZWN0IHBheW1lbnQgYW1vdW50IgogICAgZnJhbWVfZGlnIC0xCiAgICBndHhucyBBbW91bnQKICAgIGludGNfMiAvLyAxMDAwMDAwCiAgICA9PQogICAgYXNzZXJ0IC8vIEluY29ycmVjdCBwYXltZW50IGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjY0CiAgICAvLyBzZWxmLnNoYXJlc19iICs9IDEKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJzaGFyZXNfYiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zaGFyZXNfYiBleGlzdHMKICAgIGludGNfMSAvLyAxCiAgICArCiAgICBieXRlY18xIC8vICJzaGFyZXNfYiIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMub3Bpbmlvbl9tYXJrZXQuY29udHJhY3QuT3BpbmlvblRyYWRpbmcuc2V0dGxlX21hcmtldCgpIC0+IHZvaWQ6CnNldHRsZV9tYXJrZXQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NjYtNjgKICAgIC8vICMgU2V0dGxlIHRoZSBtYXJrZXQgKG9ubHkgdGhlIGNyZWF0b3IgY2FuIHNldHRsZSkKICAgIC8vIEBhYmltZXRob2QoKQogICAgLy8gZGVmIHNldHRsZV9tYXJrZXQoc2VsZikgLT4gTm9uZToKICAgIHByb3RvIDAgMAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjY5CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmNyZWF0b3IsICJPbmx5IHRoZSBjcmVhdG9yIGNhbiBzZXR0bGUgdGhlIG1hcmtldCIKICAgIHR4biBTZW5kZXIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJjcmVhdG9yIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmNyZWF0b3IgZXhpc3RzCiAgICA9PQogICAgYXNzZXJ0IC8vIE9ubHkgdGhlIGNyZWF0b3IgY2FuIHNldHRsZSB0aGUgbWFya2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NzAKICAgIC8vIGFzc2VydCBzZWxmLm91dGNvbWUgPT0gVUludDY0KDApLCAiTWFya2V0IGlzIGFscmVhZHkgc2V0dGxlZCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJvdXRjb21lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm91dGNvbWUgZXhpc3RzCiAgICAhCiAgICBhc3NlcnQgLy8gTWFya2V0IGlzIGFscmVhZHkgc2V0dGxlZAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjcxCiAgICAvLyBhc3NlcnQgR2xvYmFsLmxhdGVzdF90aW1lc3RhbXAgPj0gc2VsZi5leHBpcmF0aW9uX3RpbWUsICJNYXJrZXQgaGFzIG5vdCBleHBpcmVkIHlldCIKICAgIGdsb2JhbCBMYXRlc3RUaW1lc3RhbXAKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA0IC8vICJleHBpcmF0aW9uX3RpbWUiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuZXhwaXJhdGlvbl90aW1lIGV4aXN0cwogICAgPj0KICAgIGFzc2VydCAvLyBNYXJrZXQgaGFzIG5vdCBleHBpcmVkIHlldAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjczCiAgICAvLyBpZiBzZWxmLnNoYXJlc19hID4gc2VsZi5zaGFyZXNfYjoKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzaGFyZXNfYSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zaGFyZXNfYSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJzaGFyZXNfYiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zaGFyZXNfYiBleGlzdHMKICAgID4KICAgIGJ6IHNldHRsZV9tYXJrZXRfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo3NAogICAgLy8gc2VsZi5vdXRjb21lID0gVUludDY0KDEpCiAgICBieXRlY18wIC8vICJvdXRjb21lIgogICAgaW50Y18xIC8vIDEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCnNldHRsZV9tYXJrZXRfZWxzZV9ib2R5QDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6NzYKICAgIC8vIHNlbGYub3V0Y29tZSA9IFVJbnQ2NCgyKQogICAgYnl0ZWNfMCAvLyAib3V0Y29tZSIKICAgIHB1c2hpbnQgMiAvLyAyCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzLm9waW5pb25fbWFya2V0LmNvbnRyYWN0Lk9waW5pb25UcmFkaW5nLnJlZGVlbV9zaGFyZXMoKSAtPiB2b2lkOgpyZWRlZW1fc2hhcmVzOgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5Ojc4LTgwCiAgICAvLyAjIFJlZGVlbSBzaGFyZXMgYWZ0ZXIgdGhlIG1hcmtldCBpcyBzZXR0bGVkCiAgICAvLyBAYWJpbWV0aG9kKCkKICAgIC8vIGRlZiByZWRlZW1fc2hhcmVzKHNlbGYpIC0+IE5vbmU6CiAgICBwcm90byAwIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo4MQogICAgLy8gYXNzZXJ0IHNlbGYub3V0Y29tZSAhPSAwLCAiTWFya2V0IGlzIG5vdCBzZXR0bGVkIHlldCIKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJvdXRjb21lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm91dGNvbWUgZXhpc3RzCiAgICBhc3NlcnQgLy8gTWFya2V0IGlzIG5vdCBzZXR0bGVkIHlldAogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjgzCiAgICAvLyBpZiBzZWxmLm91dGNvbWUgPT0gMToKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJvdXRjb21lIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLm91dGNvbWUgZXhpc3RzCiAgICBpbnRjXzEgLy8gMQogICAgPT0KICAgIGJ6IHJlZGVlbV9zaGFyZXNfZWxzZV9ib2R5QDIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo4NC04NQogICAgLy8gIyBPdXRjb21lIEEgd29uOiByZWRlZW0gc2hhcmVzIG9mIEEKICAgIC8vIHNoYXJlcyA9IHNlbGYuc2hhcmVzX2EKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzaGFyZXNfYSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zaGFyZXNfYSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo4NgogICAgLy8gdG90YWxfc2hhcmVzID0gc2VsZi5zaGFyZXNfYSArIHNlbGYuc2hhcmVzX2IKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18yIC8vICJzaGFyZXNfYSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zaGFyZXNfYSBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJzaGFyZXNfYiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zaGFyZXNfYiBleGlzdHMKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo4NwogICAgLy8gcmVkZWVtX2Ftb3VudCA9IChHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmJhbGFuY2UgKiBzaGFyZXMpIC8vIHRvdGFsX3NoYXJlcwogICAgZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKICAgIGFjY3RfcGFyYW1zX2dldCBBY2N0QmFsYW5jZQogICAgYXNzZXJ0IC8vIGFjY291bnQgZnVuZGVkCiAgICB1bmNvdmVyIDIKICAgICoKICAgIHN3YXAKICAgIC8KCnJlZGVlbV9zaGFyZXNfYWZ0ZXJfaWZfZWxzZUAzOgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5Ojk0LTk5CiAgICAvLyAjIFRyYW5zZmVyIHRoZSByZWRlZW1lZCBhbW91bnQgdG8gdGhlIHNlbmRlcgogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPVR4bi5zZW5kZXIsCiAgICAvLyAgICAgYW1vdW50PXJlZGVlbV9hbW91bnQsCiAgICAvLyAgICAgZmVlPTFfMDAwLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5Ojk2CiAgICAvLyByZWNlaXZlcj1UeG4uc2VuZGVyLAogICAgdHhuIFNlbmRlcgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgaXR4bl9maWVsZCBBbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo5NC05NQogICAgLy8gIyBUcmFuc2ZlciB0aGUgcmVkZWVtZWQgYW1vdW50IHRvIHRoZSBzZW5kZXIKICAgIC8vIGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weTo5OAogICAgLy8gZmVlPTFfMDAwLAogICAgaW50Y18zIC8vIDEwMDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6OTQtOTkKICAgIC8vICMgVHJhbnNmZXIgdGhlIHJlZGVlbWVkIGFtb3VudCB0byB0aGUgc2VuZGVyCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9VHhuLnNlbmRlciwKICAgIC8vICAgICBhbW91bnQ9cmVkZWVtX2Ftb3VudCwKICAgIC8vICAgICBmZWU9MV8wMDAsCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX3N1Ym1pdAogICAgcmV0c3ViCgpyZWRlZW1fc2hhcmVzX2Vsc2VfYm9keUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5Ojg5LTkwCiAgICAvLyAjIE91dGNvbWUgQiB3b246IHJlZGVlbSBzaGFyZXMgb2YgQgogICAgLy8gc2hhcmVzID0gc2VsZi5zaGFyZXNfYgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInNoYXJlc19iIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNoYXJlc19iIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjkxCiAgICAvLyB0b3RhbF9zaGFyZXMgPSBzZWxmLnNoYXJlc19hICsgc2VsZi5zaGFyZXNfYgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzIgLy8gInNoYXJlc19hIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNoYXJlc19hIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInNoYXJlc19iIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnNoYXJlc19iIGV4aXN0cwogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjkyCiAgICAvLyByZWRlZW1fYW1vdW50ID0gKEdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MuYmFsYW5jZSAqIHNoYXJlcykgLy8gdG90YWxfc2hhcmVzCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgYWNjdF9wYXJhbXNfZ2V0IEFjY3RCYWxhbmNlCiAgICBhc3NlcnQgLy8gYWNjb3VudCBmdW5kZWQKICAgIHVuY292ZXIgMgogICAgKgogICAgc3dhcAogICAgLwogICAgYiByZWRlZW1fc2hhcmVzX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy5vcGluaW9uX21hcmtldC5jb250cmFjdC5PcGluaW9uVHJhZGluZy5kZWxldGVfYXBwbGljYXRpb24oKSAtPiB2b2lkOgpkZWxldGVfYXBwbGljYXRpb246CiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MTAxLTEwMwogICAgLy8gIyBEZWxldGUgdGhlIGFwcGxpY2F0aW9uIChvbmx5IHRoZSBjcmVhdG9yIGNhbiBkZWxldGUpCiAgICAvLyBAYWJpbWV0aG9kKGFsbG93X2FjdGlvbnM9WyJEZWxldGVBcHBsaWNhdGlvbiJdKQogICAgLy8gZGVmIGRlbGV0ZV9hcHBsaWNhdGlvbihzZWxmKSAtPiBOb25lOgogICAgcHJvdG8gMCAwCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MTA0CiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBzZWxmLmNyZWF0b3IsICJPbmx5IHRoZSBjcmVhdG9yIGNhbiBkZWxldGUgdGhlIGFwcGxpY2F0aW9uIgogICAgdHhuIFNlbmRlcgogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImNyZWF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY3JlYXRvciBleGlzdHMKICAgID09CiAgICBhc3NlcnQgLy8gT25seSB0aGUgY3JlYXRvciBjYW4gZGVsZXRlIHRoZSBhcHBsaWNhdGlvbgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjEwNi0xMTIKICAgIC8vICMgVHJhbnNmZXIgcmVtYWluaW5nIGZ1bmRzIHRvIHRoZSBjcmVhdG9yCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9c2VsZi5jcmVhdG9yLAogICAgLy8gICAgIGFtb3VudD0wLAogICAgLy8gICAgIGNsb3NlX3JlbWFpbmRlcl90bz1zZWxmLmNyZWF0b3IsCiAgICAvLyAgICAgZmVlPTFfMDAwLAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjEwOAogICAgLy8gcmVjZWl2ZXI9c2VsZi5jcmVhdG9yLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gImNyZWF0b3IiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYuY3JlYXRvciBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToxMTAKICAgIC8vIGNsb3NlX3JlbWFpbmRlcl90bz1zZWxmLmNyZWF0b3IsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAiY3JlYXRvciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5jcmVhdG9yIGV4aXN0cwogICAgaXR4bl9maWVsZCBDbG9zZVJlbWFpbmRlclRvCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MTA5CiAgICAvLyBhbW91bnQ9MCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEFtb3VudAogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gc21hcnRfY29udHJhY3RzL29waW5pb25fbWFya2V0L2NvbnRyYWN0LnB5OjEwNi0xMDcKICAgIC8vICMgVHJhbnNmZXIgcmVtYWluaW5nIGZ1bmRzIHRvIHRoZSBjcmVhdG9yCiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzEgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvb3Bpbmlvbl9tYXJrZXQvY29udHJhY3QucHk6MTExCiAgICAvLyBmZWU9MV8wMDAsCiAgICBpbnRjXzMgLy8gMTAwMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9vcGluaW9uX21hcmtldC9jb250cmFjdC5weToxMDYtMTEyCiAgICAvLyAjIFRyYW5zZmVyIHJlbWFpbmluZyBmdW5kcyB0byB0aGUgY3JlYXRvcgogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPXNlbGYuY3JlYXRvciwKICAgIC8vICAgICBhbW91bnQ9MCwKICAgIC8vICAgICBjbG9zZV9yZW1haW5kZXJfdG89c2VsZi5jcmVhdG9yLAogICAgLy8gICAgIGZlZT0xXzAwMCwKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICByZXRzdWIK","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"bareActions":{"create":[],"call":[]}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the OpinionTrading contract
 */
export type OpinionTradingArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'create_market(string,string,string,uint64)void': {
      marketQuestion: string
      outcomeA: string
      outcomeB: string
      expirationTime: bigint | number
    }
    'buy_shares_a(pay)void': {
      payment: AppMethodCallTransactionArgument
    }
    'buy_shares_b(pay)void': {
      payment: AppMethodCallTransactionArgument
    }
    'settle_market()void': Record<string, never>
    'redeem_shares()void': Record<string, never>
    'delete_application()void': Record<string, never>
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'create_market(string,string,string,uint64)void': [marketQuestion: string, outcomeA: string, outcomeB: string, expirationTime: bigint | number]
    'buy_shares_a(pay)void': [payment: AppMethodCallTransactionArgument]
    'buy_shares_b(pay)void': [payment: AppMethodCallTransactionArgument]
    'settle_market()void': []
    'redeem_shares()void': []
    'delete_application()void': []
  }
}

/**
 * The return type for each method
 */
export type OpinionTradingReturns = {
  'create_market(string,string,string,uint64)void': void
  'buy_shares_a(pay)void': void
  'buy_shares_b(pay)void': void
  'settle_market()void': void
  'redeem_shares()void': void
  'delete_application()void': void
}

/**
 * Defines the types of available calls and state of the OpinionTrading smart contract.
 */
export type OpinionTradingTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'create_market(string,string,string,uint64)void' | 'create_market', {
      argsObj: OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void']
      argsTuple: OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']
      returns: OpinionTradingReturns['create_market(string,string,string,uint64)void']
    }>
    & Record<'buy_shares_a(pay)void' | 'buy_shares_a', {
      argsObj: OpinionTradingArgs['obj']['buy_shares_a(pay)void']
      argsTuple: OpinionTradingArgs['tuple']['buy_shares_a(pay)void']
      returns: OpinionTradingReturns['buy_shares_a(pay)void']
    }>
    & Record<'buy_shares_b(pay)void' | 'buy_shares_b', {
      argsObj: OpinionTradingArgs['obj']['buy_shares_b(pay)void']
      argsTuple: OpinionTradingArgs['tuple']['buy_shares_b(pay)void']
      returns: OpinionTradingReturns['buy_shares_b(pay)void']
    }>
    & Record<'settle_market()void' | 'settle_market', {
      argsObj: OpinionTradingArgs['obj']['settle_market()void']
      argsTuple: OpinionTradingArgs['tuple']['settle_market()void']
      returns: OpinionTradingReturns['settle_market()void']
    }>
    & Record<'redeem_shares()void' | 'redeem_shares', {
      argsObj: OpinionTradingArgs['obj']['redeem_shares()void']
      argsTuple: OpinionTradingArgs['tuple']['redeem_shares()void']
      returns: OpinionTradingReturns['redeem_shares()void']
    }>
    & Record<'delete_application()void' | 'delete_application', {
      argsObj: OpinionTradingArgs['obj']['delete_application()void']
      argsTuple: OpinionTradingArgs['tuple']['delete_application()void']
      returns: OpinionTradingReturns['delete_application()void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        creator: BinaryState
        expirationTime: bigint
        marketQuestion: BinaryState
        outcome: bigint
        outcomeA: BinaryState
        outcomeB: BinaryState
        sharesA: bigint
        sharesB: bigint
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type OpinionTradingSignatures = keyof OpinionTradingTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type OpinionTradingNonVoidMethodSignatures = keyof OpinionTradingTypes['methods'] extends infer T ? T extends keyof OpinionTradingTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the OpinionTrading smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends OpinionTradingSignatures> = OpinionTradingTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the OpinionTrading smart contract to the method's return type
 */
export type MethodReturn<TSignature extends OpinionTradingSignatures> = OpinionTradingTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = OpinionTradingTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type OpinionTradingCreateCallParams =
  | Expand<CallParams<OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void'] | OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']> & {method: 'create_market'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void'] | OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']> & {method: 'create_market(string,string,string,uint64)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported delete method params for this smart contract
 */
export type OpinionTradingDeleteCallParams =
  | Expand<CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']> & {method: 'delete_application'}>
  | Expand<CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']> & {method: 'delete_application()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type OpinionTradingDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: OpinionTradingCreateCallParams
  /**
   * Delete transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  deleteParams?: OpinionTradingDeleteCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the OpinionTrading smart contract
 */
export abstract class OpinionTradingParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends OpinionTradingCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'create_market':
          case 'create_market(string,string,string,uint64)void':
            return OpinionTradingParamsFactory.create.createMarket(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the OpinionTrading smart contract using the create_market(string,string,string,uint64)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createMarket(params: CallParams<OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void'] | OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'create_market(string,string,string,uint64)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.marketQuestion, params.args.outcomeA, params.args.outcomeB, params.args.expirationTime],
        }
      },
    }
  }

  /**
   * Gets available delete ABI call param factories
   */
  static get delete() {
    return {
      _resolveByMethod<TParams extends OpinionTradingDeleteCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'delete_application':
          case 'delete_application()void':
            return OpinionTradingParamsFactory.delete.deleteApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs delete ABI call params for the OpinionTrading smart contract using the delete_application()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      deleteApplication(params: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']>): AppClientMethodCallParams {
        return {
          ...params,
          method: 'delete_application()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the buy_shares_a(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buySharesA(params: CallParams<OpinionTradingArgs['obj']['buy_shares_a(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_a(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_shares_a(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the buy_shares_b(pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static buySharesB(params: CallParams<OpinionTradingArgs['obj']['buy_shares_b(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_b(pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'buy_shares_b(pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.payment],
    }
  }
  /**
   * Constructs a no op call for the settle_market()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static settleMarket(params: CallParams<OpinionTradingArgs['obj']['settle_market()void'] | OpinionTradingArgs['tuple']['settle_market()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'settle_market()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the redeem_shares()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static redeemShares(params: CallParams<OpinionTradingArgs['obj']['redeem_shares()void'] | OpinionTradingArgs['tuple']['redeem_shares()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'redeem_shares()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the OpinionTrading smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class OpinionTradingFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `OpinionTradingFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new OpinionTradingClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new OpinionTradingClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the OpinionTrading smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: OpinionTradingDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? OpinionTradingParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (OpinionTradingCreateCallParams & { args: Uint8Array[] }) : undefined,
      deleteParams: params.deleteParams?.method ? OpinionTradingParamsFactory.delete._resolveByMethod(params.deleteParams) : params.deleteParams ? params.deleteParams as (OpinionTradingDeleteCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new OpinionTradingClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpinionTrading smart contract using the create_market(string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createMarket: (params: CallParams<OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void'] | OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(OpinionTradingParamsFactory.create.createMarket(params))
      },
    },

    /**
     * Gets available deployDelete methods
     */
    deployDelete: {
      /**
       * Deletes an existing instance of the OpinionTrading smart contract using the delete_application()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The deployDelete params
       */
      deleteApplication: (params: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appFactory.params.deployDelete(OpinionTradingParamsFactory.delete.deleteApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpinionTrading smart contract using the create_market(string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createMarket: (params: CallParams<OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void'] | OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(OpinionTradingParamsFactory.create.createMarket(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the OpinionTrading smart contract using an ABI method call using the create_market(string,string,string,uint64)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createMarket: async (params: CallParams<OpinionTradingArgs['obj']['create_market(string,string,string,uint64)void'] | OpinionTradingArgs['tuple']['create_market(string,string,string,uint64)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(OpinionTradingParamsFactory.create.createMarket(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | OpinionTradingReturns['create_market(string,string,string,uint64)void']) }, appClient: new OpinionTradingClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the OpinionTrading smart contract
 */
export class OpinionTradingClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `OpinionTradingClient`
   *
   * @param appClient An `AppClient` instance which has been created with the OpinionTrading app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `OpinionTradingClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends OpinionTradingNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `OpinionTradingClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<OpinionTradingClient> {
    return new OpinionTradingClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `OpinionTradingClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<OpinionTradingClient> {
    return new OpinionTradingClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClientInterface {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpinionTrading smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete params
       */
      deleteApplication: (params: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.params.delete(OpinionTradingParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpinionTrading smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `buy_shares_a(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buySharesA: (params: CallParams<OpinionTradingArgs['obj']['buy_shares_a(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_a(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpinionTradingParamsFactory.buySharesA(params))
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `buy_shares_b(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    buySharesB: (params: CallParams<OpinionTradingArgs['obj']['buy_shares_b(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_b(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(OpinionTradingParamsFactory.buySharesB(params))
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `settle_market()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    settleMarket: (params: CallParams<OpinionTradingArgs['obj']['settle_market()void'] | OpinionTradingArgs['tuple']['settle_market()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OpinionTradingParamsFactory.settleMarket(params))
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `redeem_shares()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    redeemShares: (params: CallParams<OpinionTradingArgs['obj']['redeem_shares()void'] | OpinionTradingArgs['tuple']['redeem_shares()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(OpinionTradingParamsFactory.redeemShares(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpinionTrading smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete transaction
       */
      deleteApplication: (params: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']> = {args: []}) => {
        return this.appClient.createTransaction.delete(OpinionTradingParamsFactory.delete.deleteApplication(params))
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpinionTrading smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `buy_shares_a(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buySharesA: (params: CallParams<OpinionTradingArgs['obj']['buy_shares_a(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_a(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpinionTradingParamsFactory.buySharesA(params))
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `buy_shares_b(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    buySharesB: (params: CallParams<OpinionTradingArgs['obj']['buy_shares_b(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_b(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(OpinionTradingParamsFactory.buySharesB(params))
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `settle_market()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    settleMarket: (params: CallParams<OpinionTradingArgs['obj']['settle_market()void'] | OpinionTradingArgs['tuple']['settle_market()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OpinionTradingParamsFactory.settleMarket(params))
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `redeem_shares()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    redeemShares: (params: CallParams<OpinionTradingArgs['obj']['redeem_shares()void'] | OpinionTradingArgs['tuple']['redeem_shares()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(OpinionTradingParamsFactory.redeemShares(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available delete methods
     */
    delete: {
      /**
       * Deletes an existing instance of the OpinionTrading smart contract using the `delete_application()void` ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The delete result
       */
      deleteApplication: async (params: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']> & SendParams = {args: []}) => {
        const result = await this.appClient.send.delete(OpinionTradingParamsFactory.delete.deleteApplication(params))
        return {...result, return: result.return as unknown as (undefined | OpinionTradingReturns['delete_application()void'])}
      },

    },

    /**
     * Makes a clear_state call to an existing instance of the OpinionTrading smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `buy_shares_a(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buySharesA: async (params: CallParams<OpinionTradingArgs['obj']['buy_shares_a(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_a(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpinionTradingParamsFactory.buySharesA(params))
      return {...result, return: result.return as unknown as (undefined | OpinionTradingReturns['buy_shares_a(pay)void'])}
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `buy_shares_b(pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    buySharesB: async (params: CallParams<OpinionTradingArgs['obj']['buy_shares_b(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_b(pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(OpinionTradingParamsFactory.buySharesB(params))
      return {...result, return: result.return as unknown as (undefined | OpinionTradingReturns['buy_shares_b(pay)void'])}
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `settle_market()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    settleMarket: async (params: CallParams<OpinionTradingArgs['obj']['settle_market()void'] | OpinionTradingArgs['tuple']['settle_market()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OpinionTradingParamsFactory.settleMarket(params))
      return {...result, return: result.return as unknown as (undefined | OpinionTradingReturns['settle_market()void'])}
    },

    /**
     * Makes a call to the OpinionTrading smart contract using the `redeem_shares()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    redeemShares: async (params: CallParams<OpinionTradingArgs['obj']['redeem_shares()void'] | OpinionTradingArgs['tuple']['redeem_shares()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(OpinionTradingParamsFactory.redeemShares(params))
      return {...result, return: result.return as unknown as (undefined | OpinionTradingReturns['redeem_shares()void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new OpinionTradingClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current OpinionTrading app
   */
  state = {
    /**
     * Methods to access global state for the current OpinionTrading app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          creator: new BinaryStateValue(result.creator),
          expirationTime: result.expiration_time,
          marketQuestion: new BinaryStateValue(result.market_question),
          outcome: result.outcome,
          outcomeA: new BinaryStateValue(result.outcome_a),
          outcomeB: new BinaryStateValue(result.outcome_b),
          sharesA: result.shares_a,
          sharesB: result.shares_b,
        }
      },
      /**
       * Get the current value of the creator key in global state
       */
      creator: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("creator")) as Uint8Array | undefined) },
      /**
       * Get the current value of the expiration_time key in global state
       */
      expirationTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("expirationTime")) as bigint | undefined },
      /**
       * Get the current value of the market_question key in global state
       */
      marketQuestion: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("marketQuestion")) as Uint8Array | undefined) },
      /**
       * Get the current value of the outcome key in global state
       */
      outcome: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("outcome")) as bigint | undefined },
      /**
       * Get the current value of the outcome_a key in global state
       */
      outcomeA: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("outcomeA")) as Uint8Array | undefined) },
      /**
       * Get the current value of the outcome_b key in global state
       */
      outcomeB: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("outcomeB")) as Uint8Array | undefined) },
      /**
       * Get the current value of the shares_a key in global state
       */
      sharesA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("sharesA")) as bigint | undefined },
      /**
       * Get the current value of the shares_b key in global state
       */
      sharesB: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("sharesB")) as bigint | undefined },
    },
  }

  public newGroup(): OpinionTradingComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a buy_shares_a(pay)void method call against the OpinionTrading contract
       */
      buySharesA(params: CallParams<OpinionTradingArgs['obj']['buy_shares_a(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_a(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buySharesA(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a buy_shares_b(pay)void method call against the OpinionTrading contract
       */
      buySharesB(params: CallParams<OpinionTradingArgs['obj']['buy_shares_b(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_b(pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.buySharesB(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a settle_market()void method call against the OpinionTrading contract
       */
      settleMarket(params: CallParams<OpinionTradingArgs['obj']['settle_market()void'] | OpinionTradingArgs['tuple']['settle_market()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.settleMarket(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a redeem_shares()void method call against the OpinionTrading contract
       */
      redeemShares(params: CallParams<OpinionTradingArgs['obj']['redeem_shares()void'] | OpinionTradingArgs['tuple']['redeem_shares()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.redeemShares(params)))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        return {
          deleteApplication: (params: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']>) => {
            promiseChain = promiseChain.then(async () => composer.addAppDeleteMethodCall(await client.params.delete.deleteApplication(params)))
            resultMappers.push(undefined)
            return this
          },
        }
      },
      /**
       * Add a clear state call to the OpinionTrading contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as OpinionTradingComposer
  }
}
export type OpinionTradingComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the buy_shares_a(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buySharesA(params?: CallParams<OpinionTradingArgs['obj']['buy_shares_a(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_a(pay)void']>): OpinionTradingComposer<[...TReturns, OpinionTradingReturns['buy_shares_a(pay)void'] | undefined]>

  /**
   * Calls the buy_shares_b(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buySharesB(params?: CallParams<OpinionTradingArgs['obj']['buy_shares_b(pay)void'] | OpinionTradingArgs['tuple']['buy_shares_b(pay)void']>): OpinionTradingComposer<[...TReturns, OpinionTradingReturns['buy_shares_b(pay)void'] | undefined]>

  /**
   * Calls the settle_market()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  settleMarket(params?: CallParams<OpinionTradingArgs['obj']['settle_market()void'] | OpinionTradingArgs['tuple']['settle_market()void']>): OpinionTradingComposer<[...TReturns, OpinionTradingReturns['settle_market()void'] | undefined]>

  /**
   * Calls the redeem_shares()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  redeemShares(params?: CallParams<OpinionTradingArgs['obj']['redeem_shares()void'] | OpinionTradingArgs['tuple']['redeem_shares()void']>): OpinionTradingComposer<[...TReturns, OpinionTradingReturns['redeem_shares()void'] | undefined]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the OpinionTrading smart contract using the delete_application()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(params?: CallParams<OpinionTradingArgs['obj']['delete_application()void'] | OpinionTradingArgs['tuple']['delete_application()void']>): OpinionTradingComposer<[...TReturns, OpinionTradingReturns['delete_application()void'] | undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the OpinionTrading smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): OpinionTradingComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): OpinionTradingComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): TransactionComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<OpinionTradingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<OpinionTradingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<OpinionTradingComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<OpinionTradingComposerResults<TReturns>>
}
export type OpinionTradingComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

